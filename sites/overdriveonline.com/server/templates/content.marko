<!-- JS statements within marko files must start with a dollar sign ($) -->
$ const { id, type, pageNode } = input;

<marko-web-document>
  <@container>
    <@page>
      <marko-web-resolve-page|{ resolved: content }| node=pageNode>
        <!-- because this is rendered in node, the log will display in the _server_ terminal, not in the browser -->
        $ console.log(content);
        <h1>${content.get("name")}</h1>
        <!-- pass the content images array to the browser component -->
        <!-- this simply JSON encodes the data and passes it as a prop to the Vue component -->
        <!-- once loaded in the browser, a Vue instance will replace this element and ingest the prop data -->
        <!-- the instance now stands alone and can import it's own client-side components, perform operations, manage it's own state, etc. -->
        <!-- essentially this is the "hand-off" from the server to the client/browser -->

        $ const images = content.getAsArray("images.edges").map((edge) => edge.node);
        <marko-web-browser-component name="MyCoolCarousel" props={ images } />
        <!--
          when viewing the rendered page source, you'll notice that the `marko-web-browser-component` renders
          inline javascript with a wrapping div. the core framework code will execute this script and
          replace the wrapping div with the Vue component.
        -->
      </marko-web-resolve-page>
    </@page>
  </@container>
</marko-web-document>
